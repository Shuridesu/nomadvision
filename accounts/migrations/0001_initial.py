# Generated by Django 5.0 on 2024-04-20 19:56

from django.db import migrations, models
from django.contrib.auth import get_user_model



def split_name(apps, schema_editor):
    User = get_user_model()
    for user in User.objects.all():
        parts = user.name.split(' ', 1)
        user.first_name = parts[0]
        if len(parts) > 1:
            user.last_name = parts[1]
        user.save()
        

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uid', models.CharField(max_length=30, unique=True, verbose_name='uid')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='mail_address')),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatar', verbose_name='profile_photo')),
                ('introduction', models.TextField(blank=True, null=True, verbose_name='introduction')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='renewed_date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_date')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user account',
                'verbose_name_plural': 'user accounts',
            },
        ),
    ]
